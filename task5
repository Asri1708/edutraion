import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix
from imblearn.over_sampling import SMOTE
import seaborn as sns
import matplotlib.pyplot as plt
# Step 2: Load the dataset
df = pd.read_csv("/content/creditcard.csv")  # Replace with your path

# Step 3: Basic info
print(df['Class'].value_counts())  # Class distribution
sns.countplot(data=df, x='Class')
plt.title("Class Distribution (0 = Genuine, 1 = Fraudulent)")
plt.show()
# Step 4: Preprocessing
X = df.drop(['Class', 'Time'], axis=1)  # Remove irrelevant features
y = df['Class']

# Normalize amount feature
scaler = StandardScaler()
X['Amount'] = scaler.fit_transform(X[['Amount']])
# Step 5: Handle Class Imbalance using SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

print("After SMOTE:")
print(pd.Series(y_resampled).value_counts())
# Step 6: Train-test split
X_train, X_test, y_train, y_test = train_test_split(
    X_resampled, y_resampled, test_size=0.3, random_state=42)
# Step 7: Train a classifier (Random Forest)
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)
y_pred = model.predict(X_test)
# Step 8: Evaluate performance
print("\nClassification Report:\n", classification_report(y_test, y_pred))
sns.heatmap(confusion_matrix(y_test, y_pred), annot=True, fmt='d', cmap='Blues')
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.title("Confusion Matrix")
plt.show()
